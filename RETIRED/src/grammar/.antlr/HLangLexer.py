# Generated from d:/StudyingStuffs/ThirdYear/PPL/PPL/hlang-compiler-main/src/grammar/HLang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,59,435,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,1,0,1,0,1,0,
        1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
        1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,3,19,231,
        8,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,
        1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,
        1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,
        1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,
        1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,
        1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,5,49,306,8,49,10,49,
        12,49,309,9,49,1,50,4,50,312,8,50,11,50,12,50,313,1,51,1,51,3,51,
        318,8,51,1,52,4,52,321,8,52,11,52,12,52,322,1,52,1,52,5,52,327,8,
        52,10,52,12,52,330,9,52,1,53,1,53,3,53,334,8,53,1,53,4,53,337,8,
        53,11,53,12,53,338,1,54,1,54,5,54,343,8,54,10,54,12,54,346,9,54,
        1,54,1,54,1,54,1,55,1,55,3,55,353,8,55,1,56,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,3,56,365,8,56,1,57,4,57,368,8,57,11,57,
        12,57,369,1,57,1,57,1,58,1,58,1,58,1,58,5,58,378,8,58,10,58,12,58,
        381,9,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,5,59,391,8,59,10,
        59,12,59,394,9,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,61,1,
        61,5,61,406,8,61,10,61,12,61,409,9,61,1,61,1,61,1,61,3,61,414,8,
        61,1,62,1,62,1,62,5,62,419,8,62,10,62,12,62,422,9,62,1,62,1,62,5,
        62,426,8,62,10,62,12,62,429,9,62,1,63,1,63,1,63,3,63,434,8,63,1,
        392,0,64,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
        45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,0,107,0,109,53,
        111,0,113,0,115,54,117,55,119,56,121,57,123,58,125,59,127,0,1,0,
        13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,
        2,0,69,69,101,101,2,0,43,43,45,45,5,0,10,10,13,13,34,34,92,92,128,
        65535,3,0,9,9,12,13,32,32,2,0,10,10,13,13,1,1,10,10,4,0,10,10,13,
        13,34,34,92,92,3,0,10,10,13,13,34,34,1,0,13,13,5,0,34,34,92,92,110,
        110,114,114,116,116,454,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
        1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
        1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,109,1,0,0,0,0,
        115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,
        0,0,0,125,1,0,0,0,1,129,1,0,0,0,3,133,1,0,0,0,5,136,1,0,0,0,7,141,
        1,0,0,0,9,145,1,0,0,0,11,152,1,0,0,0,13,157,1,0,0,0,15,164,1,0,0,
        0,17,168,1,0,0,0,19,174,1,0,0,0,21,179,1,0,0,0,23,185,1,0,0,0,25,
        194,1,0,0,0,27,200,1,0,0,0,29,205,1,0,0,0,31,211,1,0,0,0,33,215,
        1,0,0,0,35,220,1,0,0,0,37,226,1,0,0,0,39,230,1,0,0,0,41,236,1,0,
        0,0,43,239,1,0,0,0,45,241,1,0,0,0,47,243,1,0,0,0,49,245,1,0,0,0,
        51,247,1,0,0,0,53,249,1,0,0,0,55,252,1,0,0,0,57,255,1,0,0,0,59,257,
        1,0,0,0,61,260,1,0,0,0,63,262,1,0,0,0,65,265,1,0,0,0,67,268,1,0,
        0,0,69,271,1,0,0,0,71,274,1,0,0,0,73,277,1,0,0,0,75,279,1,0,0,0,
        77,281,1,0,0,0,79,283,1,0,0,0,81,285,1,0,0,0,83,287,1,0,0,0,85,289,
        1,0,0,0,87,291,1,0,0,0,89,293,1,0,0,0,91,295,1,0,0,0,93,297,1,0,
        0,0,95,299,1,0,0,0,97,301,1,0,0,0,99,303,1,0,0,0,101,311,1,0,0,0,
        103,315,1,0,0,0,105,320,1,0,0,0,107,331,1,0,0,0,109,340,1,0,0,0,
        111,352,1,0,0,0,113,364,1,0,0,0,115,367,1,0,0,0,117,373,1,0,0,0,
        119,384,1,0,0,0,121,400,1,0,0,0,123,403,1,0,0,0,125,415,1,0,0,0,
        127,433,1,0,0,0,129,130,5,83,0,0,130,131,5,84,0,0,131,132,5,82,0,
        0,132,2,1,0,0,0,133,134,5,105,0,0,134,135,5,102,0,0,135,4,1,0,0,
        0,136,137,5,101,0,0,137,138,5,108,0,0,138,139,5,115,0,0,139,140,
        5,101,0,0,140,6,1,0,0,0,141,142,5,102,0,0,142,143,5,111,0,0,143,
        144,5,114,0,0,144,8,1,0,0,0,145,146,5,114,0,0,146,147,5,101,0,0,
        147,148,5,116,0,0,148,149,5,117,0,0,149,150,5,114,0,0,150,151,5,
        110,0,0,151,10,1,0,0,0,152,153,5,102,0,0,153,154,5,117,0,0,154,155,
        5,110,0,0,155,156,5,99,0,0,156,12,1,0,0,0,157,158,5,115,0,0,158,
        159,5,116,0,0,159,160,5,114,0,0,160,161,5,105,0,0,161,162,5,110,
        0,0,162,163,5,103,0,0,163,14,1,0,0,0,164,165,5,105,0,0,165,166,5,
        110,0,0,166,167,5,116,0,0,167,16,1,0,0,0,168,169,5,102,0,0,169,170,
        5,108,0,0,170,171,5,111,0,0,171,172,5,97,0,0,172,173,5,116,0,0,173,
        18,1,0,0,0,174,175,5,98,0,0,175,176,5,111,0,0,176,177,5,111,0,0,
        177,178,5,108,0,0,178,20,1,0,0,0,179,180,5,99,0,0,180,181,5,111,
        0,0,181,182,5,110,0,0,182,183,5,115,0,0,183,184,5,116,0,0,184,22,
        1,0,0,0,185,186,5,99,0,0,186,187,5,111,0,0,187,188,5,110,0,0,188,
        189,5,116,0,0,189,190,5,105,0,0,190,191,5,110,0,0,191,192,5,117,
        0,0,192,193,5,101,0,0,193,24,1,0,0,0,194,195,5,98,0,0,195,196,5,
        114,0,0,196,197,5,101,0,0,197,198,5,97,0,0,198,199,5,107,0,0,199,
        26,1,0,0,0,200,201,5,116,0,0,201,202,5,114,0,0,202,203,5,117,0,0,
        203,204,5,101,0,0,204,28,1,0,0,0,205,206,5,102,0,0,206,207,5,97,
        0,0,207,208,5,108,0,0,208,209,5,115,0,0,209,210,5,101,0,0,210,30,
        1,0,0,0,211,212,5,108,0,0,212,213,5,101,0,0,213,214,5,116,0,0,214,
        32,1,0,0,0,215,216,5,118,0,0,216,217,5,111,0,0,217,218,5,105,0,0,
        218,219,5,100,0,0,219,34,1,0,0,0,220,221,5,119,0,0,221,222,5,104,
        0,0,222,223,5,105,0,0,223,224,5,108,0,0,224,225,5,101,0,0,225,36,
        1,0,0,0,226,227,5,105,0,0,227,228,5,110,0,0,228,38,1,0,0,0,229,231,
        5,13,0,0,230,229,1,0,0,0,230,231,1,0,0,0,231,232,1,0,0,0,232,233,
        5,10,0,0,233,234,1,0,0,0,234,235,6,19,0,0,235,40,1,0,0,0,236,237,
        5,43,0,0,237,238,5,43,0,0,238,42,1,0,0,0,239,240,5,43,0,0,240,44,
        1,0,0,0,241,242,5,45,0,0,242,46,1,0,0,0,243,244,5,42,0,0,244,48,
        1,0,0,0,245,246,5,47,0,0,246,50,1,0,0,0,247,248,5,37,0,0,248,52,
        1,0,0,0,249,250,5,61,0,0,250,251,5,61,0,0,251,54,1,0,0,0,252,253,
        5,33,0,0,253,254,5,61,0,0,254,56,1,0,0,0,255,256,5,60,0,0,256,58,
        1,0,0,0,257,258,5,60,0,0,258,259,5,61,0,0,259,60,1,0,0,0,260,261,
        5,62,0,0,261,62,1,0,0,0,262,263,5,62,0,0,263,264,5,61,0,0,264,64,
        1,0,0,0,265,266,5,62,0,0,266,267,5,62,0,0,267,66,1,0,0,0,268,269,
        5,45,0,0,269,270,5,62,0,0,270,68,1,0,0,0,271,272,5,38,0,0,272,273,
        5,38,0,0,273,70,1,0,0,0,274,275,5,124,0,0,275,276,5,124,0,0,276,
        72,1,0,0,0,277,278,5,33,0,0,278,74,1,0,0,0,279,280,5,61,0,0,280,
        76,1,0,0,0,281,282,5,46,0,0,282,78,1,0,0,0,283,284,5,40,0,0,284,
        80,1,0,0,0,285,286,5,41,0,0,286,82,1,0,0,0,287,288,5,123,0,0,288,
        84,1,0,0,0,289,290,5,125,0,0,290,86,1,0,0,0,291,292,5,91,0,0,292,
        88,1,0,0,0,293,294,5,93,0,0,294,90,1,0,0,0,295,296,5,44,0,0,296,
        92,1,0,0,0,297,298,5,63,0,0,298,94,1,0,0,0,299,300,5,59,0,0,300,
        96,1,0,0,0,301,302,5,58,0,0,302,98,1,0,0,0,303,307,7,0,0,0,304,306,
        7,1,0,0,305,304,1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,0,307,308,
        1,0,0,0,308,100,1,0,0,0,309,307,1,0,0,0,310,312,7,2,0,0,311,310,
        1,0,0,0,312,313,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,102,
        1,0,0,0,315,317,3,105,52,0,316,318,3,107,53,0,317,316,1,0,0,0,317,
        318,1,0,0,0,318,104,1,0,0,0,319,321,7,2,0,0,320,319,1,0,0,0,321,
        322,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,324,1,0,0,0,324,
        328,5,46,0,0,325,327,7,2,0,0,326,325,1,0,0,0,327,330,1,0,0,0,328,
        326,1,0,0,0,328,329,1,0,0,0,329,106,1,0,0,0,330,328,1,0,0,0,331,
        333,7,3,0,0,332,334,7,4,0,0,333,332,1,0,0,0,333,334,1,0,0,0,334,
        336,1,0,0,0,335,337,7,2,0,0,336,335,1,0,0,0,337,338,1,0,0,0,338,
        336,1,0,0,0,338,339,1,0,0,0,339,108,1,0,0,0,340,344,5,34,0,0,341,
        343,3,111,55,0,342,341,1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,
        345,1,0,0,0,345,347,1,0,0,0,346,344,1,0,0,0,347,348,5,34,0,0,348,
        349,6,54,1,0,349,110,1,0,0,0,350,353,8,5,0,0,351,353,3,113,56,0,
        352,350,1,0,0,0,352,351,1,0,0,0,353,112,1,0,0,0,354,355,5,92,0,0,
        355,365,5,110,0,0,356,357,5,92,0,0,357,365,5,116,0,0,358,359,5,92,
        0,0,359,365,5,114,0,0,360,361,5,92,0,0,361,365,5,34,0,0,362,363,
        5,92,0,0,363,365,5,92,0,0,364,354,1,0,0,0,364,356,1,0,0,0,364,358,
        1,0,0,0,364,360,1,0,0,0,364,362,1,0,0,0,365,114,1,0,0,0,366,368,
        7,6,0,0,367,366,1,0,0,0,368,369,1,0,0,0,369,367,1,0,0,0,369,370,
        1,0,0,0,370,371,1,0,0,0,371,372,6,57,0,0,372,116,1,0,0,0,373,374,
        5,47,0,0,374,375,5,47,0,0,375,379,1,0,0,0,376,378,8,7,0,0,377,376,
        1,0,0,0,378,381,1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,382,
        1,0,0,0,381,379,1,0,0,0,382,383,6,58,0,0,383,118,1,0,0,0,384,385,
        5,47,0,0,385,386,5,42,0,0,386,392,1,0,0,0,387,391,3,119,59,0,388,
        391,3,117,58,0,389,391,9,0,0,0,390,387,1,0,0,0,390,388,1,0,0,0,390,
        389,1,0,0,0,391,394,1,0,0,0,392,393,1,0,0,0,392,390,1,0,0,0,393,
        395,1,0,0,0,394,392,1,0,0,0,395,396,5,42,0,0,396,397,5,47,0,0,397,
        398,1,0,0,0,398,399,6,59,0,0,399,120,1,0,0,0,400,401,9,0,0,0,401,
        402,6,60,2,0,402,122,1,0,0,0,403,407,5,34,0,0,404,406,3,111,55,0,
        405,404,1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,
        408,413,1,0,0,0,409,407,1,0,0,0,410,411,5,13,0,0,411,414,5,10,0,
        0,412,414,7,8,0,0,413,410,1,0,0,0,413,412,1,0,0,0,414,124,1,0,0,
        0,415,420,5,34,0,0,416,419,8,9,0,0,417,419,3,113,56,0,418,416,1,
        0,0,0,418,417,1,0,0,0,419,422,1,0,0,0,420,418,1,0,0,0,420,421,1,
        0,0,0,421,423,1,0,0,0,422,420,1,0,0,0,423,427,3,127,63,0,424,426,
        8,10,0,0,425,424,1,0,0,0,426,429,1,0,0,0,427,425,1,0,0,0,427,428,
        1,0,0,0,428,126,1,0,0,0,429,427,1,0,0,0,430,434,7,11,0,0,431,432,
        5,92,0,0,432,434,8,12,0,0,433,430,1,0,0,0,433,431,1,0,0,0,434,128,
        1,0,0,0,22,0,230,307,313,317,322,328,333,338,344,352,364,369,379,
        390,392,407,413,418,420,427,433,3,6,0,0,1,54,0,1,60,1
    ]

class HLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    IF = 2
    ELSE = 3
    FOR = 4
    RETURN = 5
    FUNC = 6
    STRING = 7
    INT = 8
    FLOAT = 9
    BOOL = 10
    CONST = 11
    CONTINUE = 12
    BREAK = 13
    TRUE = 14
    FALSE = 15
    LET = 16
    VOID = 17
    WHILE = 18
    IN = 19
    NEWLINE = 20
    INCREMENT = 21
    ADD = 22
    SUB = 23
    MUL = 24
    DIV = 25
    MOD = 26
    EQUAL = 27
    NOT_EQUAL = 28
    LESS = 29
    LESS_EQUAL = 30
    GREATER = 31
    GREATER_EQUAL = 32
    PIPELINE = 33
    ARROW = 34
    AND = 35
    OR = 36
    NOT = 37
    ASSIGN = 38
    DOT = 39
    LPAREN = 40
    RPAREN = 41
    LBRACE = 42
    RBRACE = 43
    LBRACK = 44
    RBRACK = 45
    COMMA = 46
    QUESTION = 47
    SEMICOLON = 48
    COLON = 49
    ID = 50
    INTEGER_LIT = 51
    FLOAT_LIT = 52
    STRING_LIT = 53
    WS = 54
    COMMENT_INLINE = 55
    COMMENT_BLOCK = 56
    ERROR_CHAR = 57
    UNCLOSE_STRING = 58
    ILLEGAL_ESCAPE = 59

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'STR'", "'if'", "'else'", "'for'", "'return'", "'func'", "'string'", 
            "'int'", "'float'", "'bool'", "'const'", "'continue'", "'break'", 
            "'true'", "'false'", "'let'", "'void'", "'while'", "'in'", "'++'", 
            "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", "'<'", "'<='", 
            "'>'", "'>='", "'>>'", "'->'", "'&&'", "'||'", "'!'", "'='", 
            "'.'", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "'?'", 
            "';'", "':'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "STRING", "INT", "FLOAT", 
            "BOOL", "CONST", "CONTINUE", "BREAK", "TRUE", "FALSE", "LET", 
            "VOID", "WHILE", "IN", "NEWLINE", "INCREMENT", "ADD", "SUB", 
            "MUL", "DIV", "MOD", "EQUAL", "NOT_EQUAL", "LESS", "LESS_EQUAL", 
            "GREATER", "GREATER_EQUAL", "PIPELINE", "ARROW", "AND", "OR", 
            "NOT", "ASSIGN", "DOT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
            "LBRACK", "RBRACK", "COMMA", "QUESTION", "SEMICOLON", "COLON", 
            "ID", "INTEGER_LIT", "FLOAT_LIT", "STRING_LIT", "WS", "COMMENT_INLINE", 
            "COMMENT_BLOCK", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "T__0", "IF", "ELSE", "FOR", "RETURN", "FUNC", "STRING", 
                  "INT", "FLOAT", "BOOL", "CONST", "CONTINUE", "BREAK", 
                  "TRUE", "FALSE", "LET", "VOID", "WHILE", "IN", "NEWLINE", 
                  "INCREMENT", "ADD", "SUB", "MUL", "DIV", "MOD", "EQUAL", 
                  "NOT_EQUAL", "LESS", "LESS_EQUAL", "GREATER", "GREATER_EQUAL", 
                  "PIPELINE", "ARROW", "AND", "OR", "NOT", "ASSIGN", "DOT", 
                  "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
                  "COMMA", "QUESTION", "SEMICOLON", "COLON", "ID", "INTEGER_LIT", 
                  "FLOAT_LIT", "REAL_NUM", "EXPONENT_PART", "STRING_LIT", 
                  "CHARACTER", "ESCAPED_SEQ", "WS", "COMMENT_INLINE", "COMMENT_BLOCK", 
                  "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ESC_ILLEGAL" ]

    grammarFileName = "HLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    prev_token = None

    def emit(self):
        tk = self.type

        if tk == self.UNCLOSE_STRING:
            result = super().emit()
            if len(result.text) >= 2 and result.text[-1] == '\n' and result.text[-2] == '\r':
                raise UncloseString(result.text[1:-2])
            elif result.text[-1] == '\n':
                raise UncloseString(result.text[1:-1])
            else:
                raise UncloseString(result.text[1:])
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit()
            raise IllegalEscape(result.text[1:])
        elif tk == self.ERROR_CHAR:
            result = super().emit()
            raise ErrorToken(result.text)
        elif tk == self.NEWLINE:
            result = super().emit()
        result = super().emit()
        self.prev_token = result
        return result


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[54] = self.STRING_LIT_action 
            actions[60] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     


